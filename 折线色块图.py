import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import matplotlib.patches as mpatches
if __name__ == '__main__':
    def exponential_smoothing(alpha, s):
        '''
        一次指数平滑
        :param alpha:  平滑系数
        :param s:      数据序列， list
        :return:       返回一次指数平滑模型参数， list
        '''
        s_temp = []
        s_temp.append(s[0])
        print(s_temp)
        for i in range(1, len(s), 1):
            s_temp.append(float(alpha * s[i - 1] + (1 - alpha) * s_temp[i - 1]))
        return s_temp
    y2=[0.832785759, 0.837688107381295, 0.84259045576259, 0.8474928041438848, 0.8523951525251798, 0.8572975009064748, 0.8621998492877698, 0.8671021976690647, 0.8720045460503597, 0.8769068944316547, 0.8818092428129497, 0.8867115911942446, 0.8884146642805756, 0.8896814725539568, 0.8909482808273381, 0.8922150891007194, 0.8934818973741008, 0.894748705647482, 0.8960155139208633, 0.8972823221942446, 0.898549130467626, 0.8998159387410072, 0.9010827470143885, 0.9022758533992806, 0.9034456855035972, 0.9046155176079137, 0.9057853497122302, 0.9069551818165468, 0.9081250139208633, 0.9092948460251798, 0.9104646781294964, 0.9116345102338129, 0.9128043423381295, 0.913974174442446, 0.9149162858561151, 0.915730304381295, 0.9165443229064748, 0.9173583414316546, 0.9181723599568345, 0.9189863784820144, 0.9198003970071943, 0.9206144155323741, 0.9214284340575539, 0.9222424525827339, 0.9230564711079137, 0.9237280769244605, 0.9242682248561152, 0.9248083727877698, 0.9253485207194245, 0.9258886686510792, 0.9264288165827339, 0.9269689645143885, 0.9275091124460432, 0.9280492603776979, 0.9285894083093525, 0.9291295562410072, 0.9297105439928058, 0.9303527914748202, 0.9309950389568346, 0.931637286438849, 0.9322795339208634, 0.9329217814028777, 0.9335640288848921, 0.9342062763669066, 0.9348485238489209, 0.9354907713309353, 0.9361330188129496, 0.9368762683129497, 0.9378792372877698, 0.93888220626259, 0.9398851752374101, 0.9408881442122302, 0.9418911131870504, 0.9428940821618705, 0.9438970511366906, 0.9449000201115109, 0.945902989086331, 0.9469059580611511, 0.9479297793093525, 0.9490630749928057, 0.9501963706762591, 0.9513296663597123, 0.9524629620431655, 0.9535962577266187, 0.9547295534100719, 0.9558628490935251, 0.9569961447769785, 0.9581294404604317, 0.9592627361438849, 0.9604160525755395, 0.9620498669640288, 0.963683681352518, 0.9653174957410072, 0.9669513101294964, 0.9685851245179856, 0.9702189389064748, 0.971852753294964, 0.9734865676834532, 0.9751203820719424, 0.9767541964604316]
    a_0=[0.5, 0.532049716, 0.552764893, 0.46697858, 0.176830709, 0.583093941, 0.181808442, 0.240648299, 0.840189993, 0.766335905, 0.74016875, 0.175462767, 0.69306463, 0.323072016, 0.746187866, 0.710643411, 0.184792295, 0.641939342, 0.360327691, 0.518790364, 0.741991043, 0.557825267, 0.284677744, 0.387339056, 0.365341157, 0.263372004, 0.119202912, 0.45030269, 0.172289282, 0.44224146, 0.364556909, 0.119202912, 0.197149485, 0.791782498, 0.764112473, 0.228479281, 0.5, 0.591864944, 0.81231451, 0.817010999, 0.696335912, 0.502103806, 0.190698206, 0.410531968, 0.788921416, 0.234337479, 0.718863547, 0.310281515, 0.231733665, 0.166842699, 0.395414799, 0.650156736, 0.5, 0.277468264, 0.652958751, 0.129522175, 0.299572945, 0.484865844, 0.306328923, 0.449484944, 0.642955601, 0.502819777, 0.800991654, 0.565140843, 0.164849982, 0.715914369, 0.350686252, 0.6985057, 0.42799741, 0.513893545, 0.530411482, 0.450071901, 0.343798995, 0.353123665, 0.880797088, 0.200237006, 0.596910357, 0.672891557, 0.119202912, 0.285989761, 0.314068288, 0.758050442, 0.229971856, 0.795289397, 0.203133479, 0.133702129, 0.215105847, 0.131028444, 0.544557035, 0.751391411, 0.477019817, 0.452889562, 0.538404584, 0.307578385, 0.652835786, 0.408194035, 0.31899336, 0.362160504, 0.494496703,0.637839437,0.505503297]
    a_1=[0.5,0.467950314,0.447235167,0.53302145,0.823169231,0.416906029,0.818191588,0.75935173,0.159809992,0.233664081,0.25983128,0.824537218,0.3069354,0.676928043,0.253812164,0.28935656,0.81520772,0.358060628,0.639672339,0.481209576,0.258008987,0.442174733,0.715322256,0.612660944,0.634658873,0.736627996,0.880797088,0.54969728,0.827710688,0.55775857,0.635443091,0.880797088,0.802850485,0.208217517,0.235887483,0.771520734,0.5,0.408135056,0.187685519,0.182989016,0.303664148,0.497896165,0.809301794,0.589468062,0.211078569,0.765662491,0.281136423,0.689718485,0.76826632,0.833157241,0.60458523,0.349843204,0.5,0.722531736,0.347041309,0.870477855,0.700427115,0.515134156,0.693671048,0.550514996,0.357044369,0.497180164,0.199008361,0.434859127,0.835150003,0.284085631,0.649313748,0.30149433,0.57200253,0.486106485,0.469588488,0.549928129,0.656201005,0.646876335,0.119202912,0.799762964,0.403089613,0.327108443,0.880797088,0.714010239,0.685931683,0.241949558,0.770028174,0.204710633,0.796866536,0.866297841,0.784894168,0.868971586,0.455443025,0.248608574,0.522980154,0.547110498,0.461595416,0.692421675,0.347164214,0.591805935,0.68100667,0.637839437,0.505503297]


    a_0=[0.5,0.5,0.5,0.5,0.5,0.880797088,0.880797088,0.880797088,0.880797088,0.880797088,0.658487141,0.658487141,0.658487141,0.658487141,0.658487141,0.612952173,0.612952173,0.612952173,0.612952173,0.612952173,0.449094146,0.449094146,0.449094146,0.449094146,0.449094146,0.58973515,0.58973515,0.58973515,0.58973515,0.58973515,0.668890536,0.668890536,0.668890536,0.668890536,0.668890536,0.392029166,0.392029166,0.392029166,0.392029166,0.392029166,0.684742808,0.684742808,0.684742808,0.684742808,0.684742808,0.66716665,0.66716665,0.66716665,0.66716665,0.66716665,0.643517375,0.643517375,0.643517375,0.643517375,0.643517375,0.358047605,0.358047605,0.358047605,0.358047605,0.358047605,0.5,0.5,0.5,0.5,0.5,0.36886698,0.36886698,0.36886698,0.36886698,0.36886698,0.668636799,0.668636799,0.668636799,0.668636799,0.668636799,0.597044766,0.597044766,0.597044766,0.597044766,0.597044766,0.424438387,0.424438387,0.424438387,0.424438387,0.424438387,0.374710798,0.374710798,0.374710798,0.374710798,0.374710798,0.210532516,0.210532516,0.210532516,0.210532516,0.210532516,0.48594287,0.48594287,0.48594287,0.48594287]
    a_1=[0.5, 0.5, 0.5, 0.5, 0.5, 0.119202912, 0.119202912, 0.119202912, 0.119202912, 0.119202912, 0.341512918, 0.341512918, 0.341512918, 0.341512918, 0.341512918, 0.387047827, 0.387047827, 0.387047827, 0.387047827, 0.387047827, 0.550905883, 0.550905883, 0.550905883, 0.550905883, 0.550905883, 0.41026485, 0.41026485, 0.41026485, 0.41026485, 0.41026485, 0.331109464, 0.331109464, 0.331109464, 0.331109464, 0.331109464, 0.607970774, 0.607970774, 0.607970774, 0.607970774, 0.607970774, 0.315257162, 0.315257162, 0.315257162, 0.315257162, 0.315257162, 0.33283335, 0.33283335, 0.33283335, 0.33283335, 0.33283335, 0.356482625, 0.356482625, 0.356482625, 0.356482625, 0.356482625, 0.641952336, 0.641952336, 0.641952336, 0.641952336, 0.641952336, 0.5, 0.5, 0.5, 0.5, 0.5, 0.63113302, 0.63113302, 0.63113302, 0.63113302, 0.63113302, 0.331363171, 0.331363171, 0.331363171, 0.331363171, 0.331363171, 0.402955234, 0.402955234, 0.402955234, 0.402955234, 0.402955234, 0.575561523, 0.575561523, 0.575561523, 0.575561523, 0.575561523, 0.625289202, 0.625289202, 0.625289202, 0.625289202, 0.625289202, 0.789467454, 0.789467454, 0.789467454, 0.789467454, 0.789467454, 0.514057159, 0.514057159, 0.514057159, 0.514057159]

    a_0 = []
    a_1 = []
    import pandas as pd
    df = pd.read_excel(
        "/home/ubuntu/VideoAnalytics/workplace/DRL_SR_Infer/DRL_continuous/src/agent2_0_BW8_06-14_06-15_07-25_13-24.xlsx")
    df = pd.read_excel(
        "/home/ubuntu/VideoAnalytics/workplace/DRL_SR_Infer/DRL_continuous/src/newshare_agent2_0_BW8_06-14_06-15_07-25_13-24.xlsx")

    data = df.values
    for i, line in enumerate(data):
        a_0.append(line[0])

    df = pd.read_excel(
        "/home/ubuntu/VideoAnalytics/workplace/DRL_SR_Infer/DRL_continuous/src/agent2_1_BW8_06-14_06-15_07-25_13-24.xlsx")
    df = pd.read_excel(
        "/home/ubuntu/VideoAnalytics/workplace/DRL_SR_Infer/DRL_continuous/src/newshare_agent2_1_BW8_06-14_06-15_07-25_13-24.xlsx")
    data = df.values
    for i, line in enumerate(data):
        a_1.append(line[0])

    # a_0=exponential_smoothing(0.5,a_0)
    for idx,i in enumerate(a_0):
        if idx%2==1:
            a_0[idx]=a_0[idx-1]
    font1 = {'family': 'Arial',
             'weight': 'normal',
             'size': 25,
             }
    font2 = {'family': 'Arial',
             'weight': 'normal',
             'size': 25,
             }
    fs=20
    #plt.style.use('ggplot')
    bars_name = ["Reuse","LR", "SR"]  # 柱子名称
    f1score = [0.73*0.95, 0.72, 0.73]
    decode = [0,0.02220,  0.02124]
    sr = [0,0,   0.05872]
    infer = [0,0.03940,   0.04918]
    resuse=[0.01,0,0]
    labels = ["f1score", "decode", "SR", "infer","reuse"]   # 每个柱子的组成
    colors = ["06283D", "moccasin", "royalblue", "orchid"]  # 每个组成的颜色
    # colors = ["gold", "darkorange", "firebrick", "darkmagenta"]
    colors = ["#2D4059", "#EA5455", "#FFD460", "#F07B3F","#E0F9B5"]  # 每个组成的颜色

    colors_l = ['#7C6781', '#F66A6A', '#36738E', '#E08931', '#F66A6A']
    colors_l=['#36738E','#6BCB77','#7C6781','#E08931','#F66A6A']

    err_attr = {"elinewidth":1,"ecolor":"black", "capsize":6}
    other = {
        "title": "",  # 标题
        "xlabel": "Scheme",  # 横坐标名称
        "ylabel_left": "BW slicing",  # 纵坐标名称
        "ylabel_right": "Size(KB)"
    }

    fig, ax = plt.subplots(figsize=(7, 4))
    x=[i*2 for i in range(40)]
    # ax.plot(a_0,color='#779DE9',markeredgewidth=0.01,label='F1-score',zorder=20)
    ax.set_ylabel(other["ylabel_left"], fontsize=25)
    #ax2.set_ylabel(other["ylabel_right"], fontsize=14)
    ax.set_ylim(0., 1.0)
    ax.set_xlim(0., 80)
    #ax2.set_ylim(0, 350)
    ax.tick_params(labelsize=fs)
    #ax2.tick_params(labelsize=14)
    plt.fill_between(range(len(a_0)), [1 for i in range(len(a_0))], a_0, color=colors_l[4], alpha=1)
    plt.fill_between(range(len(a_0)), a_0, [0 for i in range(len(a_0))], color=colors_l[0], alpha=1)

    #lns = [lns1, lns2, lns3, lns4,lns5]
    # labs = [l.get_label() for l in lns]
    # #ax2.legend(lns, labs, fontsize=18)
    #ax2.legend( fontsize=14.5)

    #ax2.set_title(other["title"], fontsize=1200)
    # ax2.set_xlabel(other["xlabel"])
    #ax2.set_xticks(xticks + bar_width/2)
    #ax.set_xticklabels(bars_name,fontsize=20)
     # 网格线
    ax.set_xlabel('Chunk index',font2)
    # ax.legend(fontsize=14.5,bbox_to_anchor=(0.5, 0.5))
    # ax2.legend(fontsize=14.5)

    blue_patch = mpatches.Patch(color=colors_l[0], label='stream 1')
    red_patch = mpatches.Patch(color=colors_l[4], label='stream 2')
    lines = []
    labels = []
    axLine, axLabel = ax.get_legend_handles_labels()
    lines.extend(axLine)
    labels.extend(axLabel)
    #axLine, axLabel = ax2.get_legend_handles_labels()
    #lines.extend(axLine)
    #labels.extend(axLabel)
    border_color = mcolors.to_rgb('darkgray')
    border_color = tuple(c * 0.5 for c in border_color)
    plt.legend(edgecolor=border_color,handles=[blue_patch, red_patch], loc='upper left',fontsize=fs,ncol=1,framealpha=0.5)
    #plt.legend(lines, labels,ncol=2,prop=font1)

    #ax.set_yticks([0.7,0.8,0.9,1.0],[0.05,"0.30",0.55,'0.80'])
    #ax2.set_yticks( [0,2,4],[0.5,1.5,2.5])
    plt.rcParams['hatch.linewidth'] = 2
    #ax.grid(axis='y', zorder=1)
    plt.tight_layout()  # 让图片适应画布大小
    plt.savefig("bandwidth_share.pdf")
    plt.show()