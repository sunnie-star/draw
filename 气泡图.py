from matplotlib.patches import Ellipse, Circle
import matplotlib.pyplot as plt
import Multi_Gaussian as gauss
import numpy as np

#biswift
X_drl=[[0.829787234042553, 10.309278350515463], [0.758893280632411, 10.309278350515463], [0.852046169989507, 10.309278350515463], [0.748451053283767, 20.618556701030926], [0.789053591790194, 10.309278350515463], [0.816455696202532, 20.618556701030926], [0.801369863013699, 10.309278350515463], [0.883248730964467, 16.10305958132045], [0.874251497005988, 9.041591320072332], [0.842105263157895, 20.618556701030926], [0.811764705882353, 8.849557522123893], [0.867540029112082, 5.633802816901409], [0.720893141945773, 15.503875968992247], [0.674457429048414, 20.618556701030926], [0.872675250357654, 5.633802816901409], [0.841875681570338, 4.132231404958678], [0.836712913553895, 4.132231404958678], [0.888479262672811, 3.2626427406199023], [0.895850973751058, 3.2626427406199023], [0.4432, 15.503875968992247], [0.77992277992278, 10.309278350515463], [0.790273556231003, 10.309278350515463], [0.735664335664336, 15.503875968992247], [0.782089552238806, 20.618556701030926], [0.920489296636086, 4.424778761061947], [0.785153461812991, 10.309278350515463], [0.805993690851735, 6.872852233676976], [0.849755415793152, 6.872852233676976], [0.822429906542056, 8.547008547008547], [0.781048097631012, 10.309278350515463], [0.842639593908629, 3.442340791738382], [0.91588785046729, 3.1007751937984493], [0.878923766816143, 4.132231404958678], [0.704347826086957, 6.191950464396284], [0.864135021097046, 3.875968992248062], [0.936645962732919, 6.253908692933083], [0.895104895104895, 5.737234652897303], [0.881670533642691, 6.253908692933083], [0.847374847374847, 5.737234652897303], [0.839590443686007, 6.253908692933083], [0.85101822079314, 6.872852233676976], [0.830663615560641, 6.872852233676976], [0.826542491268917, 6.872852233676976], [0.853977844914401, 6.042296072507552], [0.88768115942029, 6.872852233676976], [0.865558912386707, 10.309278350515463], [0.823720552396426, 8.849557522123893], [0.806938159879336, 10.309278350515463], [0.900849858356941, 6.872852233676976], [0.89484827099506, 6.872852233676976], [0.879588839941263, 8.547008547008547], [0.918586789554531, 10.309278350515463], [0.904129793510325, 10.309278350515463], [0.898021308980213, 10.309278350515463], [0.891369047619048, 10.309278350515463], [0.938804895608351, 10.309278350515463], [0.941090909090909, 6.872852233676976], [0.827814569536424, 15.89825119236884], [0.809651474530831, 10.309278350515463], [0.932069510268562, 3.5001750087504373], [0.868460388639761, 10.309278350515463], [0.85423197492163, 10.309278350515463], [0.92524682651622, 3.7078235076010384], [0.814766839378238, 10.309278350515463], [0.822598870056497, 10.309278350515463], [0.826062322946176, 10.309278350515463], [0.7859021567596, 10.309278350515463], [0.807017543859649, 8.849557522123893], [0.93515704154002, 3.642987249544627], [0.849948612538541, 8.849557522123893], [0.897404202719407, 6.872852233676976], [0.868458274398868, 3.3057851239669422], [0.748051948051948, 10.309278350515463], [0.878048780487805, 1.6], [0.851595006934813, 6.872852233676976], [0.789250353606789, 10.309278350515463], [0.580645161290323, 20.618556701030926], [0.470842332613391, 20.618556701030926], [0.511538461538461, 20.618556701030926], [0.485260770975057, 20.618556701030926], [0.634710743801653, 20.618556701030926], [0.510835913312694, 20.618556701030926], [0.465709728867624, 20.618556701030926], [0.388405797101449, 20.618556701030926], [0.71484888304862, 10.309278350515463], [0.474148802017655, 20.618556701030926], [0.447204968944099, 20.618556701030926], [0.424908424908425, 20.618556701030926], [0.397540983606557, 20.618556701030926], [0.470930232558139, 20.618556701030926]]
X_drl=np.asarray(X_drl[35:80])
fig = plt.figure(figsize=(5, 4))
ax = fig.add_subplot(111)
MUX = []
MUY = []
MU, SIGMA = gauss.multivariate_gaussian_fit(X_drl)
a, b, ang = gauss.get_Ellipse(SIGMA)
print(a,b)
ell_cubic = Ellipse(xy=MU, width=a, height=b-3.5, angle=ang, facecolor='#6BCB77', alpha=0.9, label='Ours')
ell_cubic.set_linewidth(1)
ell_cubic.set_zorder(4)
ell_cubic.set_edgecolor("#D3D3D3")
ax.add_patch(ell_cubic)
MUX.append(MU[0])
MUY.append(MU[1])

#neuroscaler
X_neuro=[[0.8792912513842747, 0.34106412005457015], [0.8629856850715747, 0.34106412005457015], [0.8974358974358975, 0.34106412005457015], [0.8870588235294118, 0.34106412005457015], [0.8953880764904387, 0.34106412005457015], [0.9019607843137255, 0.34106412005457015], [0.8035190615835777, 0.34106412005457015], [0.8970976253298153, 0.34106412005457015], [0.8895184135977338, 0.34106412005457015], [0.8307692307692308, 0.34106412005457015], [0.8949771689497716, 0.34106412005457015], [0.8562874251497006, 0.34106412005457015], [0.8753894080996885, 0.34106412005457015], [0.8465430016863407, 0.34106412005457015], [0.8272425249169435, 0.34106412005457015], [0.8920863309352518, 0.34106412005457015], [0.880927291886196, 0.34106412005457015], [0.9095940959409594, 0.34106412005457015], [0.9255499153976311, 0.34106412005457015], [0.9078014184397163, 0.34106412005457015], [0.6420323325635104, 0.34106412005457015], [0.6713286713286714, 0.34106412005457015], [0.7534722222222222, 0.34106412005457015], [0.7888307155322862, 0.34106412005457015], [0.88379705400982, 0.34106412005457015], [0.8402625820568927, 0.34106412005457015], [0.8230383973288815, 0.34106412005457015], [0.8608282416836388, 0.34106412005457015], [0.8958611481975968, 0.34106412005457015], [0.8412698412698413, 0.34106412005457015], [0.9119341563786009, 0.34106412005457015], [0.9144634525660964, 0.34106412005457015], [0.870995670995671, 0.34106412005457015], [0.9180859691808597, 0.34106412005457015], [0.9220452640402347, 0.34106412005457015], [0.9121140142517815, 0.34106412005457015], [0.9122807017543859, 0.34106412005457015], [0.8689057421451788, 0.34106412005457015], [0.9051094890510949, 0.34106412005457015], [0.9015317286652079, 0.34106412005457015], [0.9251282051282051, 0.34106412005457015], [0.9175377468060395, 0.34106412005457015], [0.9448648648648649, 0.34106412005457015], [0.9261083743842364, 0.34106412005457015], [0.9595687331536388, 0.34106412005457015], [0.9061032863849765, 0.34106412005457015], [0.8735632183908046, 0.34106412005457015], [0.8821233411397346, 0.34106412005457015], [0.9124820659971306, 0.34106412005457015], [0.9224137931034483, 0.34106412005457015], [0.926681783824641, 0.34106412005457015], [0.9096525096525097, 0.34106412005457015], [0.9048689138576779, 0.34106412005457015], [0.934261407579273, 0.34106412005457015], [0.9137426900584795, 0.34106412005457015], [0.934220251293422, 0.34106412005457015], [0.7442439327940261, 0.34106412005457015], [0.9204647006255585, 0.34106412005457015], [0.8847517730496454, 0.34106412005457015], [0.9151750972762646, 0.34106412005457015], [0.8585786073223259, 0.34106412005457015], [0.8511278195488722, 0.34106412005457015], [0.8675543097407148, 0.34106412005457015], [0.8520123839009288, 0.34106412005457015], [0.8888888888888888, 0.34106412005457015], [0.9084745762711864, 0.34106412005457015], [0.8965141612200436, 0.34106412005457015], [0.8897464167585446, 0.34106412005457015], [0.9007238883143743, 0.34106412005457015], [0.9044522261130565, 0.34106412005457015], [0.8074461896451425, 0.34106412005457015], [0.8226299694189603, 0.34106412005457015], [0.7917241379310345, 0.34106412005457015], [0.7687687687687688, 0.34106412005457015], [0.8409090909090909, 0.34106412005457015], [0.8517985611510791, 0.34106412005457015], [0.5656292286874154, 0.34106412005457015], [0.9168356997971603, 0.34106412005457015], [0.8401639344262295, 0.34106412005457015], [0.8197424892703863, 0.34106412005457015], [0.9204737732656514, 0.34106412005457015], [0.9401197604790419, 0.34106412005457015], [0.8922610015174507, 0.34106412005457015], [0.9201623815967523, 0.34106412005457015], [0.953125, 0.34106412005457015], [0.9712722298221614, 0.34106412005457015], [0.9480314960629921, 0.34106412005457015], [0.855072463768116, 0.34106412005457015], [0.8780487804878049, 0.34106412005457015], [0.8705882352941177, 0.34106412005457015]]

X_neuro=np.asarray(X_neuro[35:80])
MU, SIGMA = gauss.multivariate_gaussian_fit(X_neuro)
MU[0]=0.7764639157340288
MU[1]=1.1703215603582
a, b, ang = gauss.get_Ellipse(SIGMA)
print(a,b)
ell_cubic = Ellipse(xy=MU, width=a, height=b+1, angle=ang,
                    facecolor='#7C6781', alpha=0.7, label='Neuroscaler')
ell_cubic.set_linewidth(1)
ell_cubic.set_zorder(5)
ell_cubic.set_edgecolor("#D3D3D3")
ax.add_patch(ell_cubic)
MUX.append(MU[0])
MUY.append(MU[1])

X_knn=np.asarray([[0.546, 20.318157410327817], [0.583, 39.17601799951201], [0.689, 33.14859140868489], [0.618, 33.766924826715936], [0.518, 43.86642909068171], [0.194, 44.41997917954683], [0.538, 44.23994055190484], [0.522, 44.48043344260261], [0.566, 41.238649230674724], [0.59, 43.59904025585785], [0.296, 44.4711740661497], [0.612, 40.67847476358053], [0.623, 41.61856061471034], [0.625, 44.31680276971001], [0.523, 41.45569350012351], [0.747, 36.73550623061081], [0.75, 38.66813842836786], [0.764, 36.69568520582705], [0.837, 39.01390803614364], [0.783, 38.62341514584768], [0.368, 36.39437199951135], [0.516, 34.40685476185067], [0.377, 39.15937592184517], [0.525, 33.85205456962457], [0.55, 36.85244560666339], [0.575, 34.5514626423173], [0.535, 40.88358921057152], [0.62, 38.672987292206614], [0.578, 38.80113706782699], [0.61, 34.60537871067933], [0.775, 33.97889160215448], [0.816, 38.19998261544065], [0.844, 38.406909211682766], [0.856, 36.54665242579397], [0.85, 38.895060719932665], [0.751, 36.391572144611324], [0.853, 41.93854530630437], [0.836, 41.76820497687958], [0.814, 41.8022844624855], [0.829, 41.65598141172171], [0.843, 41.55849206940979], [0.85, 41.70329443283275], [0.863, 41.72495036045794], [0.835, 40.877811646747276], [0.899, 41.8532992717894], [0.728, 41.37760781706117], [0.757, 43.4689220356026], [0.778, 41.365868653220595], [0.83, 40.403018091559616], [0.782, 44.31388420930341], [0.824, 41.49238402509026], [0.848, 44.191495638213034], [0.806, 44.44696699730807], [0.809, 43.81837104896948], [0.839, 44.264467574620745], [0.853, 43.74214692088382], [0.739, 37.077064364194825], [0.737, 44.36674311964776], [0.716, 36.385342434588594], [0.697, 38.40272456830067], [0.731, 41.55676268764613], [0.764, 41.573128950300855], [0.822, 40.54663393044166], [0.747, 40.958859765075815], [0.722, 38.92120395251906], [0.768, 41.52548025644478], [0.79, 41.684588327043684], [0.753, 41.44969850379344], [0.8, 38.72787123575724], [0.865, 37.71127527843451], [0.797, 35.65231377909485], [0.613, 36.319115517739405], [0.567, 39.16440972512722], [0.621, 36.62538220132876], [0.7, 36.92184701535938], [0.749, 41.70645982857931], [0.752, 36.80982930358592], [0.851, 34.35091972221003], [0.798, 36.226055066545335], [0.752, 37.07205037407707], [0.829, 41.61244961660455], [0.844, 36.597717438236565], [0.737, 34.0001006040371], [0.901, 37.41855630557607], [0.879, 36.62322887918409], [0.971, 38.91791757578358], [0.903, 36.36305082228926], [0.792, 34.78507681404794], [0.842, 34.929397264898306], [0.808, 37.14583473459002], [0.442, 40.71459226498488], [0.69, 34.409837435229036], [0.758, 43.64891950633382], [0.745, 41.54352259021353], [0.732, 41.49520274771064], [0.653, 34.40968687780873], [0.726, 36.512366795814316], [0.651, 39.04889811512322]]
)


X_knn=[[0.51207729468599, 10.1010101010101], [0.733480176211454, 5.31914893617021], [0.770642201834862, 3.6101083032491], [0.730523627075351, 6.96864111498258], [0.774108322324967, 3.1104199066874], [0.885714285714286, 18.348623853211], [0.856304985337243, 6.96864111498258], [0.882191780821918, 18.348623853211], [0.733333333333333, 18.348623853211], [0.790697674418605, 10.1010101010101], [0.720149253731343, 2.73224043715847], [0.794612794612795, 4.3010752688172], [0.472998137802607, 18.348623853211], [0.767605633802817, 4.3010752688172], [0.746710526315789, 6.96864111498258], [0.754208754208754, 2.73224043715847], [0.810098792535675, 2.73224043715847], [0.770428015564202, 2.43605359317905], [0.844827586206897, 2.43605359317905], [0.759450171821306, 2.43605359317905], [0.326007326007326, 6.96864111498258], [0.67296786389414, 6.96864111498258], [0.507563025210084, 18.348623853211], [0.685598377281947, 6.96864111498258], [0.680221811460259, 6.96864111498258], [0.428708133971292, 5.31914893617021], [0.607766990291262, 6.96864111498258], [0.622923588039867, 10.1010101010101], [0.557983193277311, 10.1010101010101], [0.508226691042048, 6.96864111498258], [0.735864978902954, 2.1978021978022], [0.826969943135662, 2.43605359317905], [0.84580703336339, 2.73224043715847], [0.772765957446809, 5.31914893617021], [0.857881136950904, 2.43605359317905], [0.354401805869074, 6.96864111498258], [0.785522788203753, 6.96864111498258], [0.832704402515723, 6.96864111498258], [0.790257104194858, 6.96864111498258], [0.739079102715466, 6.96864111498258], [0.724137931034483, 6.96864111498258], [0.731414868105516, 6.96864111498258], [0.802784222737819, 6.96864111498258], [0.858908341915551, 6.96864111498258], [0.746075715604801, 6.96864111498258], [0.248927038626609, 10.1010101010101], [0.777327935222672, 10.1010101010101], [0.699145299145299, 10.1010101010101], [0.77639751552795, 10.1010101010101], [0.787644787644788, 10.1010101010101], [0.906976744186046, 10.1010101010101], [0.907965970610982, 10.1010101010101], [0.829770387965162, 10.1010101010101], [0.845594179466451, 10.1010101010101], [0.83452098178939, 10.1010101010101], [0.848111025443331, 10.1010101010101], [0.30781627719581, 10.1010101010101], [0.831024930747922, 3.6101083032491], [0.75609756097561, 6.96864111498258], [0.816326530612245, 6.96864111498258], [0.740520446096654, 10.1010101010101], [0.810408921933085, 6.96864111498258], [0.710628394103957, 6.96864111498258], [0.683660130718954, 10.1010101010101], [0.825434913017396, 6.96864111498258], [0.74125, 10.1010101010101], [0.745562130177515, 10.1010101010101], [0.793184488836663, 10.1010101010101], [0.807349081364829, 6.96864111498258], [0.752839372633856, 10.1010101010101], [0.696066746126341, 5.31914893617021], [0.654044750430293, 10.1010101010101], [0.618012422360248, 10.1010101010101], [0.689303904923599, 10.1010101010101], [0.771929824561403, 6.96864111498258], [0.612389380530973, 10.1010101010101], [0.552301255230126, 5.31914893617021], [0.718162839248434, 5.31914893617021], [0.812371134020619, 2.1978021978022], [0.771618625277162, 2.43605359317905], [0.794964028776978, 5.31914893617021], [0.753488372093023, 6.96864111498258], [0.866359447004608, 1.69923534409516], [0.774381368267831, 5.31914893617021], [0.682795698924731, 6.96864111498258], [0.717598908594816, 6.96864111498258], [0.770967741935484, 5.31914893617021], [0.667857142857143, 4.3010752688172], [0.74468085106383, 3.6101083032491], [0.765060240963855, 4.3010752688172]]

X_knn=np.asarray(X_knn[35:80])



MU, SIGMA = gauss.multivariate_gaussian_fit(X_knn)
a, b, ang = gauss.get_Ellipse(SIGMA)
ell_cubic = Ellipse(xy=MU, width=a-0.1, height=b-1.5, angle=ang, facecolor='#36738E', alpha=0.9, label='Reducto')
ell_cubic.set_linewidth(1)
ell_cubic.set_zorder(2)
ell_cubic.set_edgecolor("#D3D3D3")
ax.add_patch(ell_cubic)
MUX.append(MU[0])
MUY.append(MU[1])


X_accdecoder=[[0.656, 0.6284686098426657], [0.625, 1.6666666666666667], [0.771, 1.1624134637032524], [0.779, 1.6666666666666667], [0.736, 1.170717207199225], [0.816, 1.6666666666666667], [0.769, 1.6666666666666667], [0.782, 1.6666666666666667], [0.867, 1.6666666666666667], [0.838, 1.6666666666666667], [0.784, 1.6666666666666667], [0.783, 1.1525526625081493], [0.637, 1.6666666666666667], [0.781, 1.6666666666666667], [0.738, 1.1751318083488065], [0.738, 1.1638846604082884], [0.736, 1.170720801696157], [0.803, 1.1034848430109554], [0.85, 1.1559763016567925], [0.854, 1.1755467978839809], [0.686, 1.1570381951397632], [0.567, 1.6666666666666667], [0.496, 1.6666666666666667], [0.643, 1.6666666666666667], [0.568, 1.6666666666666667], [0.751, 1.1610517119310957], [0.63, 1.6666666666666667], [0.683, 1.1639715453838686], [0.629, 1.1594802768896966], [0.673, 1.6666666666666667], [0.855, 0.8742553859983403], [0.785, 1.1753682505951433], [0.847, 1.169233912694229], [0.81, 1.6666666666666667], [0.853, 1.1487715564751586], [0.956, 0.8818052519053854], [0.87, 0.8844111660047306], [0.846, 1.1776770705687194], [0.873, 0.8716005646631328], [0.883, 0.8856846518486189], [0.872, 1.1707936767119251], [0.938, 0.876819736311041], [0.873, 1.1787245665468873], [0.923, 1.1777065007809362], [0.933, 0.8827298314977841], [0.853, 1.6666666666666667], [0.838, 1.1381254024734617], [0.835, 1.1584474928119042], [0.874, 1.1332939621933733], [0.869, 1.6666666666666667], [0.903, 0.8768811458662036], [0.92, 1.6666666666666667], [0.893, 0.8820173886735002], [0.932, 1.167956631483405], [0.887, 0.8870055150402985], [0.909, 1.1667736604575996], [0.82, 1.6319213233438663], [0.773, 1.6666666666666667], [0.807, 1.6666666666666667], [0.823, 1.138024732602293], [0.826, 1.6666666666666667], [0.801, 1.1772318287930283], [0.85, 1.6666666666666667], [0.877, 1.1553588773242254], [0.783, 1.6666666666666667], [0.854, 1.1604731624976514], [0.866, 1.1302214940992754], [0.875, 1.1634062180481741], [0.855, 1.6666666666666667], [0.859, 1.1607740904245114], [0.858, 1.1378978398284993], [0.662, 1.1565159335444073], [0.617, 1.1760428641208946], [0.669, 1.1745203977676164], [0.733, 1.1738991093802227], [0.758, 1.177289985285896], [0.855, 0.8826932346294829], [0.888, 1.1795642376690278], [0.806, 1.1734229049493048], [0.789, 1.1727726073954523], [0.822, 1.1494616513562017], [0.806, 1.6666666666666667], [0.684, 1.6666666666666667], [0.82, 1.6666666666666667], [0.905, 0.8842886610262838], [0.945, 1.168688211413158], [0.854, 1.6666666666666667], [0.823, 1.1664501502014146], [0.733, 1.1618074889679777], [0.87, 1.16769162738702], [0.621, 1.6666666666666667], [0.688, 1.6666666666666667], [0.818, 1.6666666666666667], [0.862, 1.6666666666666667], [0.826, 1.0771774748343967], [0.814, 1.6666666666666667], [0.778, 1.6666666666666667], [0.714, 1.6666666666666667]]

X_accdecoder=np.asarray(X_accdecoder[35:80])
MU, SIGMA = gauss.multivariate_gaussian_fit(X_accdecoder)
MU[0]=0.804679494457313
MU[1]=1.403109187036432
a, b, ang = gauss.get_Ellipse(SIGMA)
ell_cubic = Ellipse(xy=MU, width=a-0.05, height=b, angle=ang, facecolor='#F66A6A', alpha=0.8, label='accdecoder')
ell_cubic.set_linewidth(1)
ell_cubic.set_zorder(6)
ell_cubic.set_edgecolor("#D3D3D3")
ax.add_patch(ell_cubic)
MUX.append(MU[0])
MUY.append(MU[1])


font1 = {'family' : 'Arial',
'weight' : 'normal',
'size'   : 20,
         }
font2 = {'family' : 'Arial',
'weight' : 'normal',
'size'   : 20,
         }
txt=['Ours','DDS w/AccDec.','Reducto w/AccDec.','Glimpse',"AWStream w/AccDec."]
txt=['BiSwift','Neuroscaler*','Reducto','AccDec.',"AWStream"]
my_zorder = [3, 3, 3,3, 3]
textx=[0.012,-0.165,-0.12,0.013,-0.28]

texty=[-0.6,0.2,0.2,0,0.2]
for i in range(0,4):

    plt.scatter([MUX[i]], [MUY[i]], c='white', marker='o', edgecolors='black', linewidths=1, zorder=my_zorder[i]*2+1.5, s=40)

    plt.annotate(txt[i], xy=(MUX[i], MUY[i]), xytext=(MUX[i]+textx[i] , MUY[i]+texty[i]),font=font1,zorder=100)  # 这里xy是需要标记的坐标，xytext是对应的标签坐标

#ax.annotate('better', xy=(6, 420), xytext=(2, 140), arrowprops=dict(arrowstyle="->", color="black"), fontsize=17)
import matplotlib.patches as mpatches
biswift_patch = mpatches.Patch(color='#6BCB77', label='BiSwift',alpha=0.9)
neuro_patch = mpatches.Patch(color='#7C6781', label='Neuroscaler\n+infer.',alpha=0.9)
reducto_patch = mpatches.Patch(color='#36738E', label='Reducto',alpha=0.9)
acc_patch = mpatches.Patch(color='#F66A6A', label='AccDec.',alpha=0.9)
biswift_patch.set_edgecolor('black')
neuro_patch.set_edgecolor('black')
reducto_patch.set_edgecolor('black')
acc_patch.set_edgecolor('black')

# plt.legend(handles=[biswift_patch, neuro_patch,reducto_patch,acc_patch],
# labelspacing = 1,
#            prop=font1,ncol=1,frameon=False,
#             bbox_to_anchor=(1, 0.95)
#            )
plt.xlim((0.6, 1))
plt.ylim((0, 12.5))
my_x_ticks = np.arange(0.6, 1., 0.1)
labels=['-20%','0%','20%','40%']
my_y_ticks = np.arange(0, 12.5,2.5)
#my_y_ticks=[1.0,2.5,5.0,7.5]
#plt.xticks(my_x_ticks,labels,fontsize=15)
print(my_y_ticks)
plt.xticks(my_x_ticks,fontsize=15)
#labels=['1.0x','2.5x','5.0x','7.5x']
plt.yticks(my_y_ticks,fontsize=15)
#plt.yticks(my_y_ticks,labels,fontsize=15)
plt.xlabel('F1-score',font2)
plt.ylabel('Streams', font2)
# plt.axvline(x=1,ls="-",c="green",zorder=2,linewidth=2)#添加垂直直线
#plt.text(0.85,8.5,"base\naccuracy",font=font1,fontsize=15)
# plt.arrow(0,0,1,1,width=0.05,shape='full')
#plt.legend(['Ours','DDS','Reducto','Glimpse',"AWStream"], loc='best', fontsize=17)
# ax.grid(zorder=-200)

plt.tight_layout()
plt.savefig("qipao.pdf", format="pdf",dpi=0)
plt.savefig("qipao.svg", format="svg")
plt.show()
