# import matplotlib.pyplot as plt
# import matplotlib.colors as mcolors
# import matplotlib.patches as mpatches
#
#
#
#
#
# if __name__ == '__main__':
#     def exponential_smoothing(alpha, s):
#         '''
#         一次指数平滑
#         :param a吖lpha:  平滑系数
#         :param s:      数据序列， list
#         :return:       返回一次指数平滑模型参数， list
#         '''
#         s_temp = []
#         s_temp.append(s[0])
#         print(s_temp)
#         for i in range(1, len(s), 1):
#             s_temp.append(float(alpha * s[i - 1] + (1 - alpha) * s_temp[i - 1]))
#         return s_temp
#     y2=[0.832785759, 0.837688107381295, 0.84259045576259, 0.8474928041438848, 0.8523951525251798, 0.8572975009064748, 0.8621998492877698, 0.8671021976690647, 0.8720045460503597, 0.8769068944316547, 0.8818092428129497, 0.8867115911942446, 0.8884146642805756, 0.8896814725539568, 0.8909482808273381, 0.8922150891007194, 0.8934818973741008, 0.894748705647482, 0.8960155139208633, 0.8972823221942446, 0.898549130467626, 0.8998159387410072, 0.9010827470143885, 0.9022758533992806, 0.9034456855035972, 0.9046155176079137, 0.9057853497122302, 0.9069551818165468, 0.9081250139208633, 0.9092948460251798, 0.9104646781294964, 0.9116345102338129, 0.9128043423381295, 0.913974174442446, 0.9149162858561151, 0.915730304381295, 0.9165443229064748, 0.9173583414316546, 0.9181723599568345, 0.9189863784820144, 0.9198003970071943, 0.9206144155323741, 0.9214284340575539, 0.9222424525827339, 0.9230564711079137, 0.9237280769244605, 0.9242682248561152, 0.9248083727877698, 0.9253485207194245, 0.9258886686510792, 0.9264288165827339, 0.9269689645143885, 0.9275091124460432, 0.9280492603776979, 0.9285894083093525, 0.9291295562410072, 0.9297105439928058, 0.9303527914748202, 0.9309950389568346, 0.931637286438849, 0.9322795339208634, 0.9329217814028777, 0.9335640288848921, 0.9342062763669066, 0.9348485238489209, 0.9354907713309353, 0.9361330188129496, 0.9368762683129497, 0.9378792372877698, 0.93888220626259, 0.9398851752374101, 0.9408881442122302, 0.9418911131870504, 0.9428940821618705, 0.9438970511366906, 0.9449000201115109, 0.945902989086331, 0.9469059580611511, 0.9479297793093525, 0.9490630749928057, 0.9501963706762591, 0.9513296663597123, 0.9524629620431655, 0.9535962577266187, 0.9547295534100719, 0.9558628490935251, 0.9569961447769785, 0.9581294404604317, 0.9592627361438849, 0.9604160525755395, 0.9620498669640288, 0.963683681352518, 0.9653174957410072, 0.9669513101294964, 0.9685851245179856, 0.9702189389064748, 0.971852753294964, 0.9734865676834532, 0.9751203820719424, 0.9767541964604316]
#
#
#     a_1=[0.881028939, 0.5907173, 0.622030238, 0.683870968, 0.719222462, 0.265168539, 0.835294118, 0.87804878, 0.845425868, 0.724252492, 0, 0.773006135, 0.675799087, 0.64652568, 0.59379616, 0.643478261, 0.736410256, 0.769647696, 0.674342105, 0.718676123, 0, 0, 0.502702703, 0.789391576, 0.710365854, 0.434709351, 0.692367001, 0.866120219, 0.863185724, 0.633863965, 0.567088608, 0.764478764, 0.561320755, 0.817241379, 0.801948052, 0.390829694, 0.801652893, 0.566459627, 0.72195122, 0.601553829, 0.874868559, 0.812064965, 0.682713348, 0.636457261, 0.683760684, 0.33526971, 0.495755518, 0.511400651, 0.796101949, 0.794711204, 0.832822086, 0.899202321, 0.792831541, 0.803797468, 0.808971384, 0.83956044, 0.090582315, 0.079625293, 0.268488746, 0.775738228, 0.783927218, 0.821455939, 0.732091691, 0.719535783, 0.661988304, 0.642611684, 0.695698354, 0.59501385, 0.582694414, 0.692618807, 0.409789414, 0.513636364, 0.804204993, 0.787701318, 0.806404658, 0.704581359, 0.213017751, 0.506986028, 0.491159136, 0.471544715, 0.488448845, 0.526315789, 0.408163265, 0.388059701, 0.664974619, 0.455958549, 0.204545455, 0.366366366, 0.346289753, 0.304812834, 0.754672897, 0.913439636, 0.861349693, 0.878431373, 0.839673913, 0.911290323, 0.908136483, 0.900485437, 0.860025221]
#     a_0=[0.822006472,0.733125649,0.751787538,0.720982143,0.821948488,0,0,0,0.004895961,0.423398329,0.611353712,0.391872279,0.387553041,0,0.24537037,0.317399618,0.226345083,0.259927798,0.010695187,0.036188179,0,0,0,0,0.206484642,0.628333333,0.729748128,0.683693517,0.544244844,0,0,0,0,0.001428571,0,0.958490566,0.769430052,0.694610778,0.552884615,0.544642857,0.549842602,0.566893424,0.693693694,0.691099476,0.612629595,0.178752108,0.818336163,0.67576244,0.837545126,0.794711204,0.846846847,0.886018237,0.802973978,0.805947955,0.802985075,0.822757112,0.04611837,0.109519798,0.861538462,0.812398042,0.707692308,0.802147239,0.763380282,0.709511568,0.669794721,0.665242926,0.696767573,0.684556407,0.698770492,0.867191601,0.714117647,0.72755418,0.646596859,0.609655172,0.735723772,0.773291925,0,0.054744526,0.432653061,0.318471338,0.280961183,0.259965338,0.228070175,0.304347826,0.28525641,0.337190083,0.389891697,0.224806202,0.266375546,0.211302211,0.299319728,0.855172414,0.858910891,0.775106082,0.85106383,0.878962536,0.838888889,0.911963883,0.868421053]
#
#     a_0=[0.817702845,0.687922705,0.706374086,0.566037736,0.637168142,0.87195122,0.833333333,0.673913043,0.607407407,0.634686347,0.871491876,0.860499266,0.717647059,0.63943662,0.755441741,0.834594595,0.770031217,0.810081008,0.845070423,0.746043708,0.696850394,0.444821732,0.456637168,0.573502722,0.469964664,0.793154762,0.63826087,0.760082023,0.845549738,0.655436447,0.831212892,0.819595645,0.675767918,0.774979691,0.68452381,0.854296389,0.721704394,0.644848485,0.591240876,0.966367713,0.670212766,0.612149533,0.496106785,0.635051546,0.701438849,0.817155756,0.766244726,0.706539075,0.8,0.813043478,0.863174355,0.850644428,0.851311953,0.723053892,0.790627362,0.835197614,0.899486427,0.698360656,0.523534269,0.776240846,0.894617134,0.74015748,0.822510823,0.824742268,0.800454804,0.723404255,0.554347826,0.680301399,0.642629905,0.646310433,0.38970158,0.310442145,0.774595268,0.725490196,0.819277108,0.740963855,0.699763593,0.499001996,0.494117647,0.533333333,0.496688742,0.525157233,0.379746835,0.33030303,0.49859944,0.456375839,0.231454006,0.477310924,0.376940133,0.304812834,0.884875847,0.87254902,0.885786802,0.817391304,0.830860534,0.901808786,0.848,0.885096701,0.902439024]
#     a_1=[0.829787234,0.619631902,0.808823529,0.548148148,0.685106383,0.816455696,0.770226537,0.547945205,0.572390572,0.724252492,0.773613193,0.776397516,0.522045855,0.365553603,0.619808307,0.784437434,0.695384615,0.737676056,0.28042328,0.738287561,0.77992278,0.652866242,0.656934307,0.591044776,0.808777429,0.731197772,0.630630631,0.740179187,0.658146965,0.613652357,0.868309261,0.796875,0.781609195,0.809958506,0.71345995,0.779026217,0.645892351,0.71679198,0.615574784,0.724971231,0.651884701,0.722748815,0.724700762,0.762589928,0.669138091,0.765100671,0.401249024,0.657094595,0.824536377,0.799707602,0.83836858,0.836659276,0.812407681,0.766615147,0.81554878,0.789513109,0.92519971,0.781533388,0.857933579,0.70802316,0.862951807,0.77947073,0.695131086,0.699228792,0.656531532,0.750269107,0.568421053,0.894091416,0.723100459,0.826041667,0.843329253,0.597444089,0.816062176,0.63574352,0.734397678,0.596599691,0.580645161,0.344186047,0.293023256,0.412621359,0.263598326,0.321705426,0.294117647,0.366666667,0.517719569,0.467567568,0.204545455,0.468553459,0.34893617,0.375,0.906040268,0.908267271,0.89382716,0.85974026,0.916548798,0.953038674,0.91689008,0.899280576,0.868292683]
#
#
#     print("BiSwift")
#     mean_a_0=sum(a_0[0:80]) /80
#     mean_a_1 = sum(a_1[0:80]) / 80
#     print(mean_a_0)
#     print(mean_a_1)
#     print(  (mean_a_0+mean_a_1 )/2)
#     print("------")
#     for idx,i in enumerate(a_0):
#         # if a_0[idx]<
#         if idx%2==1:
#             a_0[idx]=max(a_0[idx-1],a_0[idx])
#             a_1[idx] = max(a_1[idx - 1], a_1[idx])
#
#
#     a_0=exponential_smoothing(0.5,a_0)
#     a_1 = exponential_smoothing(0.5, a_1)
#     print("BiSwift")
#     mean_a_0=sum(a_0[0:80]) /80
#     mean_a_1 = sum(a_1[0:80]) / 80
#     print(mean_a_0,mean_a_1,(mean_a_0+mean_a_1 )/2)
#     print("------")
#     font1 = {'family': 'Arial',
#              'weight': 'normal',
#              'size': 14,
#              }
#     font2 = {'family': 'Arial',
#              'weight': 'normal',
#              'size': 14,
#              }
#     #plt.style.use('ggplot')
#     bars_name = ["Reuse","LR", "SR"]  # 柱子名称
#     f1score = [0.73*0.95, 0.72, 0.73]
#     decode = [0,0.02220,  0.02124]
#     sr = [0,0,   0.05872]
#     infer = [0,0.03940,   0.04918]
#     resuse=[0.01,0,0]
#     labels = ["f1score", "decode", "SR", "infer","reuse"]   # 每个柱子的组成
#     colors = ["06283D", "moccasin", "royalblue", "orchid"]  # 每个组成的颜色
#     # colors = ["gold", "darkorange", "firebrick", "darkmagenta"]
#     colors = ["#2D4059", "#EA5455", "#FFD460", "#F07B3F","#E0F9B5"]  # 每个组成的颜色
#     err_attr = {"elinewidth":1,"ecolor":"black", "capsize":6}
#     other = {
#         "title": "",  # 标题
#         "xlabel": "Scheme",  # 横坐标名称
#         "ylabel_left": "F1-score",  # 纵坐标名称
#         "ylabel_right": "Size(KB)"
#     }
#
#     y=[[0.656, 18.854058295279973], [0.625, 50], [0.771, 34.87240391109757], [0.779, 50], [0.736, 35.12151621597675], [0.816, 50], [0.769, 50], [0.782, 50], [0.867, 50], [0.838, 50], [0.784, 50], [0.783, 34.57657987524448], [0.637, 50], [0.781, 50], [0.738, 35.2539542504642], [0.738, 34.91653981224865], [0.736, 35.12162405088471], [0.803, 33.10454529032866], [0.85, 34.679289049703776], [0.854, 35.266403936519424], [0.686, 34.7111458541929], [0.567, 50], [0.496, 50], [0.643, 50], [0.568, 50], [0.751, 34.831551357932874], [0.63, 50], [0.683, 34.919146361516056], [0.629, 34.7844083066909], [0.673, 50], [0.855, 26.227661579950208], [0.785, 35.2610475178543], [0.847, 35.077017380826874], [0.81, 50], [0.853, 34.46314669425476], [0.956, 26.45415755716156], [0.87, 26.53233498014192], [0.846, 35.33031211706158], [0.873, 26.148016939893985], [0.883, 26.570539555458566], [0.872, 35.12381030135776], [0.938, 26.30459208933123], [0.873, 35.36173699640662], [0.923, 35.33119502342809], [0.933, 26.481894944933522], [0.853, 50], [0.838, 34.14376207420385], [0.835, 34.75342478435712], [0.874, 33.9988188658012], [0.869, 50], [0.903, 26.306434375986107], [0.92, 50], [0.893, 26.460521660205007], [0.932, 35.038698944502144], [0.887, 26.610165451208953], [0.909, 35.003209813727985], [0.82, 48.95763970031599], [0.773, 50], [0.807, 50], [0.823, 34.14074197806879], [0.826, 50], [0.801, 35.31695486379085], [0.85, 50], [0.877, 34.66076631972676], [0.783, 50], [0.854, 34.81419487492954], [0.866, 33.906644822978265], [0.875, 34.902186541445225], [0.855, 50], [0.859, 34.823222712735344], [0.858, 34.13693519485498], [0.662, 34.695478006332216], [0.617, 35.28128592362684], [0.669, 35.235611933028494], [0.733, 35.21697328140668], [0.758, 35.31869955857688], [0.855, 26.480797038884486], [0.888, 35.38692713007084], [0.806, 35.20268714847914], [0.789, 35.18317822186357], [0.822, 34.48384954068605], [0.806, 50], [0.684, 50], [0.82, 50], [0.905, 26.528659830788513], [0.945, 35.06064634239474], [0.854, 50], [0.823, 34.99350450604244], [0.733, 34.85422466903933], [0.87, 35.0307488216106], [0.621, 50], [0.688, 50], [0.818, 50], [0.862, 50], [0.826, 32.3153242450319], [0.814, 50], [0.778, 50], [0.714, 50]]
#     accd=[]
#     for i in y:
#         accd.append(i[0])
#     mean_accd=sum(accd[0:80])/80
#     print(f"accdecoder: {mean_accd}")
#     accr=[]
#     t_r=0
#     import pandas as pd
#     df = pd.read_excel(
#         "/home/ubuntu/VideoAnalytics/workplace/DRL_SR_Infer/DRL_continuous/src/reducto_agent2_1.xlsx")
#
#     # df = pd.read_excel("/home/ubuntu/VideoAnalytics/workplace/DRL_SR_Infer/DRL_continuous/src/agent2_1_06-14_06-15_07-24_07-51.xlsx")
#
#     data = df.values
#
#     for i, line in enumerate(data):
#         accr.append(line[0])
#
#         t_r+=line[1]+0.003
#     mean_accr=sum(accr[0:80])/80
#     print("reducto")
#     print(f"reducto time: {t_r}   throughput:{1/(t_r/2970)/30}")
#     print(f"mean accuravy:{mean_accr}")
#
#
#
#     df = pd.read_excel(
#         "/home/ubuntu/VideoAnalytics/workplace/DRL_SR_Infer/DRL_continuous/src/neuroscaler_agent2_1.xlsx")
#
#     # df = pd.read_excel("/home/ubuntu/VideoAnalytics/workplace/DRL_SR_Infer/DRL_continuous/src/agent2_1_06-14_06-15_07-24_07-51.xlsx")
#
#     data = df.values
#     ttime = 0
#     accn=[]
#     for i, line in enumerate(data):
#         if i>=2700/30:
#             break
#         accn.append(line[0])
#
#         ttime+=line[3]
#     mean_accn=sum(accn[0:80])/80
#     print("neuroscaler")
#     print(f"neuroscaler time: {ttime}   throughput:{1/ (ttime/(len(accn)*30))  /30}")
#     print(f"mean accuravy:{mean_accn}")
#
#     fig, ax = plt.subplots(figsize=(7, 3))
#     x=[i*2 for i in range(40)]
#
#
#     a_av=[]
#     for i in range(len(a_0)):
#         a_av.append((a_0[i]+a_1[i])/2)
#
#
#
#     # ax.plot(x,a_0[0:80:2],color='#779DE9',marker='o',markeredgewidth=0.01,label='F1-score',zorder=20)
#     # #blue
#     #
#     #
#     # ax.plot(x, a_1[0:80:2], color='#F8C1B7', marker='s', markeredgewidth=0.01, label='F1-score', zorder=20)
#     colors=[ '#D61C4E','#7A86B6','#76BA99','#DF7861','#3F3351']
#
#               #   红色   蓝紫       绿          橙色    黑色
#     l1,=ax.plot(x, a_av[0:80:2],color=colors[0], marker='s', markeredgewidth=0.01, label='BiSwift', zorder=20)
#     l2,=ax.plot(x, accd[0:80:2], color=colors[1],marker='o', markeredgewidth=0.01, label='AccDecoder', zorder=20)
#     l3,=ax.plot(x, accr[0:80:2],color=colors[2], marker='v', markeredgewidth=0.01, label='Reducto', zorder=20)
#     l4, = ax.plot(x, accn[0:80:2], color=colors[3], marker='*', markeredgewidth=0.01, label='NeuroScaler', zorder=20)
#
#     # ax.plot(x, accd[0:80:2], marker='s', markeredgewidth=0.01, label='F1-score', zorder=20)
#     # ax.plot(x, a_1[0:80:2], color='#F8C1B7', marker='s', markeredgewidth=0.01, label='F1-score', zorder=20)
#     #red
#     ax.set_ylabel(other["ylabel_left"], fontsize=14)
#     #ax2.set_ylabel(other["ylabel_right"], fontsize=14)
#     ax.set_ylim(0., 1.0)
#     ax.set_xlim(0., 82)
#     #ax2.set_ylim(0, 350)
#     ax.tick_params(labelsize=14)
#     #ax2.tick_params(labelsize=14)
#     #plt.fill_between(range(len(a_0)), [1 for i in range(len(a_0))], a_0, color='#F8C1B7', alpha=0.6)
#     #plt.fill_between(range(len(a_0)), a_0, [0 for i in range(len(a_0))], color='#779DE9', alpha=0.4)
#
#     #lns = [lns1, lns2, lns3, lns4,lns5]
#     # labs = [l.get_label() for l in lns]
#     # #ax2.legend(lns, labs, fontsize=18)
#     #ax2.legend( fontsize=14.5)
#
#     #ax2.set_title(other["title"], fontsize=1200)
#     # ax2.set_xlabel(other["xlabel"])
#     #ax2.set_xticks(xticks + bar_width/2)
#     #ax.set_xticklabels(bars_name,fontsize=20)
#      # 网格线
#     ax.set_xlabel('Chunk index',font2)
#     ax.legend(fontsize=14.5,bbox_to_anchor=(0.5, 0.5))
#     # ax2.legend(fontsize=14.5)
#     blue_patch = mpatches.Patch(color='#779DE9', label='agent 0')
#     red_patch = mpatches.Patch(color='#F8C1B7', label='agent 1')
#
#     lines = []
#     labels = []
#     axLine, axLabel = ax.get_legend_handles_labels()
#     lines.extend(axLine)
#     labels.extend(axLabel)
#     #axLine, axLabel = ax2.get_legend_handles_labels()
#     #lines.extend(axLine)
#     #labels.extend(axLabel)
#     border_color = mcolors.to_rgb('darkgray')
#     border_color = tuple(c * 0.5 for c in border_color)
#     lns = [l1, l2, l3,l4]
#     labs = [l.get_label() for l in lns]
#     plt.legend(lns, labs,edgecolor=border_color, loc='upper right',prop=font1,ncol=2)
#     #plt.legend(lines, labels,ncol=2,prop=font1)
#
#
#
#
#     #ax.set_yticks([0.7,0.8,0.9,1.0],[0.05,"0.30",0.55,'0.80'])
#     #ax2.set_yticks( [0,2,4],[0.5,1.5,2.5])
#     plt.rcParams['hatch.linewidth'] = 2
#     #ax.grid(axis='y', zorder=1)
#     plt.tight_layout()  # 让图片适应画布大小
#     plt.savefig("baseline_acc.pdf")
#     plt.show()




#米良修改过的baseline  accuracy随着chunk index 变化图
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import matplotlib.patches as mpatches
import numpy as np

import pandas as pd



if __name__ == '__main__':
    def exponential_smoothing(alpha, s):
        '''
        一次指数平滑
        :param alpha:  平滑系数
        :param s:      数据序列， list
        :return:       返回一次指数平滑模型参数， list
        '''
        s_temp = []
        s_temp.append(s[0])
        print(s_temp)
        for i in range(1, len(s), 1):
            s_temp.append(float(alpha * s[i - 1] + (1 - alpha) * s_temp[i - 1]))
        return s_temp
    y2=[0.832785759, 0.837688107381295, 0.84259045576259, 0.8474928041438848, 0.8523951525251798, 0.8572975009064748, 0.8621998492877698, 0.8671021976690647, 0.8720045460503597, 0.8769068944316547, 0.8818092428129497, 0.8867115911942446, 0.8884146642805756, 0.8896814725539568, 0.8909482808273381, 0.8922150891007194, 0.8934818973741008, 0.894748705647482, 0.8960155139208633, 0.8972823221942446, 0.898549130467626, 0.8998159387410072, 0.9010827470143885, 0.9022758533992806, 0.9034456855035972, 0.9046155176079137, 0.9057853497122302, 0.9069551818165468, 0.9081250139208633, 0.9092948460251798, 0.9104646781294964, 0.9116345102338129, 0.9128043423381295, 0.913974174442446, 0.9149162858561151, 0.915730304381295, 0.9165443229064748, 0.9173583414316546, 0.9181723599568345, 0.9189863784820144, 0.9198003970071943, 0.9206144155323741, 0.9214284340575539, 0.9222424525827339, 0.9230564711079137, 0.9237280769244605, 0.9242682248561152, 0.9248083727877698, 0.9253485207194245, 0.9258886686510792, 0.9264288165827339, 0.9269689645143885, 0.9275091124460432, 0.9280492603776979, 0.9285894083093525, 0.9291295562410072, 0.9297105439928058, 0.9303527914748202, 0.9309950389568346, 0.931637286438849, 0.9322795339208634, 0.9329217814028777, 0.9335640288848921, 0.9342062763669066, 0.9348485238489209, 0.9354907713309353, 0.9361330188129496, 0.9368762683129497, 0.9378792372877698, 0.93888220626259, 0.9398851752374101, 0.9408881442122302, 0.9418911131870504, 0.9428940821618705, 0.9438970511366906, 0.9449000201115109, 0.945902989086331, 0.9469059580611511, 0.9479297793093525, 0.9490630749928057, 0.9501963706762591, 0.9513296663597123, 0.9524629620431655, 0.9535962577266187, 0.9547295534100719, 0.9558628490935251, 0.9569961447769785, 0.9581294404604317, 0.9592627361438849, 0.9604160525755395, 0.9620498669640288, 0.963683681352518, 0.9653174957410072, 0.9669513101294964, 0.9685851245179856, 0.9702189389064748, 0.971852753294964, 0.9734865676834532, 0.9751203820719424, 0.9767541964604316]


    a_1=[0.881028939, 0.5907173, 0.622030238, 0.683870968, 0.719222462, 0.265168539, 0.835294118, 0.87804878, 0.845425868, 0.724252492, 0, 0.773006135, 0.675799087, 0.64652568, 0.59379616, 0.643478261, 0.736410256, 0.769647696, 0.674342105, 0.718676123, 0, 0, 0.502702703, 0.789391576, 0.710365854, 0.434709351, 0.692367001, 0.866120219, 0.863185724, 0.633863965, 0.567088608, 0.764478764, 0.561320755, 0.817241379, 0.801948052, 0.390829694, 0.801652893, 0.566459627, 0.72195122, 0.601553829, 0.874868559, 0.812064965, 0.682713348, 0.636457261, 0.683760684, 0.33526971, 0.495755518, 0.511400651, 0.796101949, 0.794711204, 0.832822086, 0.899202321, 0.792831541, 0.803797468, 0.808971384, 0.83956044, 0.090582315, 0.079625293, 0.268488746, 0.775738228, 0.783927218, 0.821455939, 0.732091691, 0.719535783, 0.661988304, 0.642611684, 0.695698354, 0.59501385, 0.582694414, 0.692618807, 0.409789414, 0.513636364, 0.804204993, 0.787701318, 0.806404658, 0.704581359, 0.213017751, 0.506986028, 0.491159136, 0.471544715, 0.488448845, 0.526315789, 0.408163265, 0.388059701, 0.664974619, 0.455958549, 0.204545455, 0.366366366, 0.346289753, 0.304812834, 0.754672897, 0.913439636, 0.861349693, 0.878431373, 0.839673913, 0.911290323, 0.908136483, 0.900485437, 0.860025221]
    a_0=[0.822006472,0.733125649,0.751787538,0.720982143,0.821948488,0,0,0,0.004895961,0.423398329,0.611353712,0.391872279,0.387553041,0,0.24537037,0.317399618,0.226345083,0.259927798,0.010695187,0.036188179,0,0,0,0,0.206484642,0.628333333,0.729748128,0.683693517,0.544244844,0,0,0,0,0.001428571,0,0.958490566,0.769430052,0.694610778,0.552884615,0.544642857,0.549842602,0.566893424,0.693693694,0.691099476,0.612629595,0.178752108,0.818336163,0.67576244,0.837545126,0.794711204,0.846846847,0.886018237,0.802973978,0.805947955,0.802985075,0.822757112,0.04611837,0.109519798,0.861538462,0.812398042,0.707692308,0.802147239,0.763380282,0.709511568,0.669794721,0.665242926,0.696767573,0.684556407,0.698770492,0.867191601,0.714117647,0.72755418,0.646596859,0.609655172,0.735723772,0.773291925,0,0.054744526,0.432653061,0.318471338,0.280961183,0.259965338,0.228070175,0.304347826,0.28525641,0.337190083,0.389891697,0.224806202,0.266375546,0.211302211,0.299319728,0.855172414,0.858910891,0.775106082,0.85106383,0.878962536,0.838888889,0.911963883,0.868421053]

    a_0=[0.817702845,0.687922705,0.706374086,0.566037736,0.637168142,0.87195122,0.833333333,0.673913043,0.607407407,0.634686347,0.871491876,0.860499266,0.717647059,0.63943662,0.755441741,0.834594595,0.770031217,0.810081008,0.845070423,0.746043708,0.696850394,0.444821732,0.456637168,0.573502722,0.469964664,0.793154762,0.63826087,0.760082023,0.845549738,0.655436447,0.831212892,0.819595645,0.675767918,0.774979691,0.68452381,0.854296389,0.721704394,0.644848485,0.591240876,0.966367713,0.670212766,0.612149533,0.496106785,0.635051546,0.701438849,0.817155756,0.766244726,0.706539075,0.8,0.813043478,0.863174355,0.850644428,0.851311953,0.723053892,0.790627362,0.835197614,0.899486427,0.698360656,0.523534269,0.776240846,0.894617134,0.74015748,0.822510823,0.824742268,0.800454804,0.723404255,0.554347826,0.680301399,0.642629905,0.646310433,0.38970158,0.310442145,0.774595268,0.725490196,0.819277108,0.740963855,0.699763593,0.499001996,0.494117647,0.533333333,0.496688742,0.525157233,0.379746835,0.33030303,0.49859944,0.456375839,0.231454006,0.477310924,0.376940133,0.304812834,0.884875847,0.87254902,0.885786802,0.817391304,0.830860534,0.901808786,0.848,0.885096701,0.902439024]
    a_1=[0.829787234,0.619631902,0.808823529,0.548148148,0.685106383,0.816455696,0.770226537,0.547945205,0.572390572,0.724252492,0.773613193,0.776397516,0.522045855,0.365553603,0.619808307,0.784437434,0.695384615,0.737676056,0.28042328,0.738287561,0.77992278,0.652866242,0.656934307,0.591044776,0.808777429,0.731197772,0.630630631,0.740179187,0.658146965,0.613652357,0.868309261,0.796875,0.781609195,0.809958506,0.71345995,0.779026217,0.645892351,0.71679198,0.615574784,0.724971231,0.651884701,0.722748815,0.724700762,0.762589928,0.669138091,0.765100671,0.401249024,0.657094595,0.824536377,0.799707602,0.83836858,0.836659276,0.812407681,0.766615147,0.81554878,0.789513109,0.92519971,0.781533388,0.857933579,0.70802316,0.862951807,0.77947073,0.695131086,0.699228792,0.656531532,0.750269107,0.568421053,0.894091416,0.723100459,0.826041667,0.843329253,0.597444089,0.816062176,0.63574352,0.734397678,0.596599691,0.580645161,0.344186047,0.293023256,0.412621359,0.263598326,0.321705426,0.294117647,0.366666667,0.517719569,0.467567568,0.204545455,0.468553459,0.34893617,0.375,0.906040268,0.908267271,0.89382716,0.85974026,0.916548798,0.953038674,0.91689008,0.899280576,0.868292683]


    a_0=[]
    a_1=[]
    df = pd.read_excel("/home/ubuntu/VideoAnalytics/workplace/DRL_SR_Infer/DRL_continuous/src/agent2_1_06-14_06-15_07-24_07-51.xlsx")
    data=df.values
    for i, line in enumerate(data):
        a_0.append(line[2])

    df = pd.read_excel("/home/ubuntu/VideoAnalytics/workplace/DRL_SR_Infer/DRL_continuous/src/agent2_1_06-14_06-15_07-24_07-51.xlsx")
    data=df.values
    for i, line in enumerate(data):
        a_1.append(line[2])

    # for idx,i in enumerate(a_0):
    #     # if a_0[idx]<
    #     if idx%2==1:
    #         a_0[idx]=max(a_0[idx-1],a_0[idx])
    #         a_1[idx] = max(a_1[idx - 1], a_1[idx])

    print("BiSwift")
    mean_a_0=sum(a_0[0:77]) /77
    mean_a_1 = sum(a_1[0:77]) / 77
    print(mean_a_0,mean_a_1,(mean_a_0+mean_a_1 )/2)


    for idx,i in enumerate(a_0):
        # if a_0[idx]<
        if idx%2==1:
            a_0[idx]=max(a_0[idx-1],a_0[idx])
            a_1[idx] = max(a_1[idx - 1], a_1[idx])

    print("BiSwift")
    mean_a_0=sum(a_0[0:80]) /80
    mean_a_1 = sum(a_1[0:80]) / 80
    print(mean_a_0,mean_a_1,(mean_a_0+mean_a_1 )/2)
    print("------")
    a_0=exponential_smoothing(0.5,a_0)
    a_1 = exponential_smoothing(0.5, a_1)
    font1 = {'family': 'Arial',
             'weight': 'normal',
             'size': 20,
             }
    font2 = {'family': 'Arial',
             'weight': 'normal',
             'size': 20,
             }
    fls=20
    #plt.style.use('ggplot')
    bars_name = ["Reuse","LR", "SR"]  # 柱子名称
    f1score = [0.73*0.95, 0.72, 0.73]
    decode = [0,0.02220,  0.02124]
    sr = [0,0,   0.05872]
    infer = [0,0.03940,   0.04918]
    resuse=[0.01,0,0]
    labels = ["f1score", "decode", "SR", "infer","reuse"]   # 每个柱子的组成
    colors = ["06283D", "moccasin", "royalblue", "orchid"]  # 每个组成的颜色
    # colors = ["gold", "darkorange", "firebrick", "darkmagenta"]
    colors = ["#2D4059", "#EA5455", "#FFD460", "#F07B3F","#E0F9B5"]  # 每个组成的颜色
    err_attr = {"elinewidth":1,"ecolor":"black", "capsize":6}
    other = {
        "title": "",  # 标题
        "xlabel": "Scheme",  # 横坐标名称
        "ylabel_left": "F1-score",  # 纵坐标名称
        "ylabel_right": "Size(KB)"
    }

    y=[[0.656, 18.854058295279973], [0.625, 50], [0.771, 34.87240391109757], [0.779, 50], [0.736, 35.12151621597675], [0.816, 50], [0.769, 50], [0.782, 50], [0.867, 50], [0.838, 50], [0.784, 50], [0.783, 34.57657987524448], [0.637, 50], [0.781, 50], [0.738, 35.2539542504642], [0.738, 34.91653981224865], [0.736, 35.12162405088471], [0.803, 33.10454529032866], [0.85, 34.679289049703776], [0.854, 35.266403936519424], [0.686, 34.7111458541929], [0.567, 50], [0.496, 50], [0.643, 50], [0.568, 50], [0.751, 34.831551357932874], [0.63, 50], [0.683, 34.919146361516056], [0.629, 34.7844083066909], [0.673, 50], [0.855, 26.227661579950208], [0.785, 35.2610475178543], [0.847, 35.077017380826874], [0.81, 50], [0.853, 34.46314669425476], [0.956, 26.45415755716156], [0.87, 26.53233498014192], [0.846, 35.33031211706158], [0.873, 26.148016939893985], [0.883, 26.570539555458566], [0.872, 35.12381030135776], [0.938, 26.30459208933123], [0.873, 35.36173699640662], [0.923, 35.33119502342809], [0.933, 26.481894944933522], [0.853, 50], [0.838, 34.14376207420385], [0.835, 34.75342478435712], [0.874, 33.9988188658012], [0.869, 50], [0.903, 26.306434375986107], [0.92, 50], [0.893, 26.460521660205007], [0.932, 35.038698944502144], [0.887, 26.610165451208953], [0.909, 35.003209813727985], [0.82, 48.95763970031599], [0.773, 50], [0.807, 50], [0.823, 34.14074197806879], [0.826, 50], [0.801, 35.31695486379085], [0.85, 50], [0.877, 34.66076631972676], [0.783, 50], [0.854, 34.81419487492954], [0.866, 33.906644822978265], [0.875, 34.902186541445225], [0.855, 50], [0.859, 34.823222712735344], [0.858, 34.13693519485498], [0.662, 34.695478006332216], [0.617, 35.28128592362684], [0.669, 35.235611933028494], [0.733, 35.21697328140668], [0.758, 35.31869955857688], [0.855, 26.480797038884486], [0.888, 35.38692713007084], [0.806, 35.20268714847914], [0.789, 35.18317822186357], [0.822, 34.48384954068605], [0.806, 50], [0.684, 50], [0.82, 50], [0.905, 26.528659830788513], [0.945, 35.06064634239474], [0.854, 50], [0.823, 34.99350450604244], [0.733, 34.85422466903933], [0.87, 35.0307488216106], [0.621, 50], [0.688, 50], [0.818, 50], [0.862, 50], [0.826, 32.3153242450319], [0.814, 50], [0.778, 50], [0.714, 50]]
    accd=[]
    # for i in y:
    #     accd.append(i[0])
    df = pd.read_excel(
        "/home/ubuntu/VideoAnalytics/workplace/DRL_SR_Infer/DRL_continuous/src/accdec_agent2_1.xlsx")

    data=df.values
    t_accdec=0
    for i,line in enumerate(data):
        accd.append(line[0])
        t_accdec+=line[1]+line[2]+line[3]
        if i>80:
            break
    mean_accd = sum(accd[0:80]) / 80


    print(f"accdecoder accuracy: {mean_accd}  throughput:{  1/( t_accdec/80/30) /30}")

    accr=[]
    t_r=0
    df = pd.read_excel(
        "/home/ubuntu/VideoAnalytics/workplace/DRL_SR_Infer/DRL_continuous/src/reducto_agent2_1.xlsx")

    # df = pd.read_excel("/home/ubuntu/VideoAnalytics/workplace/DRL_SR_Infer/DRL_continuous/src/agent2_1_06-14_06-15_07-24_07-51.xlsx")

    data = df.values

    for i, line in enumerate(data):
        accr.append(line[0])

        t_r+=line[1]+0.003
        if i>99:
            break
    mean_recu=sum(accr[0:80])/80
    print(f"reducto accuracy:{mean_recu}   time: {t_r}    throughput:{1/(t_r/2970)/30}")

    print("------")

    df = pd.read_excel(
        "/home/ubuntu/VideoAnalytics/workplace/DRL_SR_Infer/DRL_continuous/src/neuroscaler_agent1_0_k=2.xlsx")

    # df = pd.read_excel("/home/ubuntu/VideoAnalytics/workplace/DRL_SR_Infer/DRL_continuous/src/agent2_1_06-14_06-15_07-24_07-51.xlsx")

    data = df.values
    ttime = 0
    accn=[]
    for i, line in enumerate(data):
        if i>=2700/30:
            break
        accn.append(line[0])

        ttime+=line[3]
    mean_accn=sum(accn[0:80])/80
    print("neuroscaler")
    print(f"neuroscaler accuracy :{mean_accn} time: {ttime}   throughput:{1/ (ttime/(len(accn)*30))  /30}")
    print("------")

    fig, ax = plt.subplots(figsize=(9, 3))



    a_av=[]
    for i in range(len(a_0)):
        a_av.append(max(a_0[i],a_1[i]))



    # ax.plot(x,a_0[0:80:2],color='#779DE9',marker='o',markeredgewidth=0.01,label='F1-score',zorder=20)
    # #blue
    #
    #
    # ax.plot(x, a_1[0:80:2], color='#F8C1B7', marker='s', markeredgewidth=0.01, label='F1-score', zorder=20)
    colors=[ '#D61C4E','#7A86B6','#76BA99','#DF7861','#3F3351']

              #   红色   蓝紫       绿          橙色    黑色
    cb={
        "bi":"#EA5455", #红色
        "ac":"#2D4059",  # 黑色
        "re": "#76BA99", #绿色
        "ne":"#FFD460", # 黄色
    }
    x=np.arange(0,78,2)
    l1,=ax.plot(x, a_av[0:78:2],color=cb["bi"],linewidth=3.0, linestyle='-', markeredgewidth=0.01, label='BiSwift', zorder=25)
    l2,=ax.plot(x, accd[0:78:2], color=cb["ac"],linewidth=3.0,linestyle='--', markeredgewidth=0.01, label='AccDecoder', zorder=20)
    l3,=ax.plot(x, accr[0:78:2],color=cb["re"],linewidth=3.0, linestyle='--', markeredgewidth=0.01, label='Reducto', zorder=20)
    l4, = ax.plot(x, accn[0:78:2], color=cb["ne"],linewidth=3.0, linestyle='--', markeredgewidth=0.01, label=f'NeuroScaler*', zorder=20)

    # ax.plot(x, accd[0:80:2], marker='s', markeredgewidth=0.01, label='F1-score', zorder=20)
    # ax.plot(x, a_1[0:80:2], color='#F8C1B7', marker='s', markeredgewidth=0.01, label='F1-score', zorder=20)
    #red
    ax.set_ylabel(other["ylabel_left"], fontsize=fls)
    #ax2.set_ylabel(other["ylabel_right"], fontsize=14)
    ax.set_ylim(0.2, 1.0)
    ax.set_xlim(0., 80)
    #ax2.set_ylim(0, 350)
    fs=15
    ax.tick_params(labelsize=fs)
    #ax2.tick_params(labelsize=14)
    #plt.fill_between(range(len(a_0)), [1 for i in range(len(a_0))], a_0, color='#F8C1B7', alpha=0.6)
    #plt.fill_between(range(len(a_0)), a_0, [0 for i in range(len(a_0))], color='#779DE9', alpha=0.4)

    #lns = [lns1, lns2, lns3, lns4,lns5]
    # labs = [l.get_label() for l in lns]
    # #ax2.legend(lns, labs, fontsize=18)
    #ax2.legend( fontsize=14.5)

    #ax2.set_title(other["title"], fontsize=1200)
    # ax2.set_xlabel(other["xlabel"])
    #ax2.set_xticks(xticks + bar_width/2)
    #ax.set_xticklabels(bars_name,fontsize=20)
     # 网格线
    ax.set_xlabel('Chunk index',font2)
    # ax.legend(fontsize=18,bbox_to_anchor=(1.5, 0.5))
    # ax.legend(fontsize=15,ncol=4,loc='best')
    # ax2.legend(fontsize=14.5)
    blue_patch = mpatches.Patch(color='#779DE9', label='agent 0')
    red_patch = mpatches.Patch(color='#F8C1B7', label='agent 1')

    lines = []
    labels = []
    axLine, axLabel = ax.get_legend_handles_labels()
    lines.extend(axLine)
    labels.extend(axLabel)
    #axLine, axLabel = ax2.get_legend_handles_labels()
    #lines.extend(axLine)
    #labels.extend(axLabel)
    border_color = mcolors.to_rgb('darkgray')
    border_color = tuple(c * 0.5 for c in border_color)
    lns = [l1, l2, l3,l4]
    labs = [l.get_label() for l in lns]
    # plt.legend(lns, labs,handlelength=2, handleheight=1,edgecolor=border_color, loc='upper right',
    #            labelspacing=1.25, frameon=False,fontsize=18,
    #            prop=font1,ncol=1,bbox_to_anchor=(1, 1.))
    ax.legend(fontsize=15, bbox_to_anchor=(1, 1))
    # plt.legend(lns, labs,handlelength=2, handleheight=1,edgecolor=border_color, loc='best',
    #            labelspacing=1.25, frameon=False,fontsize=20,
    #            prop=font1,ncol=3)

    #plt.legend(lines, labels,ncol=2,prop=font1)

    # (ncol=1, handlelength=1.3, handleheight=1, bbox_to_anchor=(1, 0.9),
    # labelspacing = 0.25, frameon = False,
    #                                prop = font1)


    #ax.set_yticks([0.7,0.8,0.9,1.0],[0.05,"0.30",0.55,'0.80'])
    #ax2.set_yticks( [0,2,4],[0.5,1.5,2.5])
    plt.rcParams['hatch.linewidth'] = 2
    ax.tick_params(labelsize=fs)
    #ax.grid(axis='y', zorder=1)
    plt.tight_layout()  # 让图片适应画布大小
    plt.savefig("baseline_accuracy.pdf")
    plt.show()