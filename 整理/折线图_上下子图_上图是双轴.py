
def exponential_smoothing(alpha, s):
    '''
    一次指数平滑
    :param alpha:  平滑系数
    :param s:      数据序列， list
    :return:       返回一次指数平滑模型参数， list
    '''
    s_temp = []
    s_temp.append(s[0])
    print(s_temp)
    for i in range(1, len(s), 1):
        s_temp.append(alpha * s[i-1] + (1 - alpha) * s_temp[i-1])
    return s_temp


import matplotlib.pyplot as plt
from colors import(colors,fls,fs,font1,font2)
false_size = [21714.22705, 21714.22705, 21724.58129, 22510.49334, 24003.31465, 25449.52348, 26983.19201, 28295.20112, 29557.75999, 30848.77680, 32080.08409, 33302.18676, 34434.20357, 35549.53118, 36464.01577, 37528.23896, 38538.00841, 39484.42151, 40397.95340, 41184.56167, 42021.02803, 42920.16118, 43746.82691, 44536.59566, 45445.45270, 46164.26314, 46918.71058, 47757.76594, 48642.35249, 49325.32726, 50015.90470, 50725.04870, 51521.44289, 52447.71374, 52912.14926, 53807.96566, 54511.17589, 54912.33427, 55789.19376, 56354.71338, 56638.53644, 57605.66503, 58081.93728, 58532.39348, 59365.12579, 59787.18325, 60564.91100, 60862.55851, 61526.15943, 62406.41906, 62551.02137, 62699.65487, 63680.95165, 64410.18535, 64760.08234, 65258.16819, 65919.09601, 66693.85424, 67599.23651, 68052.90715, 68659.28732, 69709.31395, 70293.73931, 71275.90049, 71818.62474, 72926.64541, 73761.38157, 74528.26559, 75821.70568, 76773.03048, 77984.77260, 79269.16783, 80071.48318, 81672.63315, 83548.09706, 83873.67449, 85291.26349, 87485.08269, 89541.85704, 90699.42116, 92831.66363, 95203.01717, 97206.07568, 100436.46636, 102636.69516, 105235.95200, 109042.95410, 111599.49334, 116401.57043, 119959.24422, 126470.10371, 131360.25788, 136543.46286, 146842.97828, 159293.30484, 173210.85179, 190888.13174, 211367.27575, 234308.44604, 282633.64436, 319963.96111]
false_size_0=[i/(1024) for i in false_size]
#false_size=false_size[1::5]
print(len(false_size))
x_0=[i for i in range(len(false_size))]
fig, (ax1, ax) = plt.subplots(nrows=2, ncols=1, sharex=True,figsize=(7.5, 5.6))

false_size = [21714.22705, 21714.22705, 21724.58129, 22510.49334, 24003.31465, 25449.52348, 26983.19201, 28295.20112,
              29557.75999, 30848.77680, 32080.08409, 33302.18676, 34434.20357, 35549.53118, 36464.01577, 37528.23896,
              38538.00841, 39484.42151, 40397.95340, 41184.56167, 42021.02803, 42920.16118, 43746.82691, 44536.59566,
              45445.45270, 46164.26314, 46918.71058, 47757.76594, 48642.35249, 49325.32726, 50015.90470, 50725.04870,
              51521.44289, 52447.71374, 52912.14926, 53807.96566, 54511.17589, 54912.33427, 55789.19376, 56354.71338,
              56638.53644, 57605.66503, 58081.93728, 58532.39348, 59365.12579, 59787.18325, 60564.91100, 60862.55851,
              61526.15943, 62406.41906, 62551.02137, 62699.65487, 63680.95165, 64410.18535, 64760.08234, 65258.16819,
              65919.09601, 66693.85424, 67599.23651, 68052.90715, 68659.28732, 69709.31395, 70293.73931, 71275.90049,
              71818.62474, 72926.64541, 73761.38157, 74528.26559, 75821.70568, 76773.03048, 77984.77260, 79269.16783,
              80071.48318, 81672.63315, 83548.09706, 83873.67449, 85291.26349, 87485.08269, 89541.85704, 90699.42116,
              92831.66363, 95203.01717, 97206.07568, 100436.46636, 102636.69516, 105235.95200, 109042.95410,
              111599.49334, 116401.57043, 119959.24422, 126470.10371, 131360.25788, 136543.46286, 146842.97828,
              159293.30484, 173210.85179, 190888.13174, 211367.27575, 234308.44604, 282633.64436, 319963.96111]
false_size = [i / (1024) for i in false_size]

false_time = [1.43130, 1.38006, 1.51323, 1.45868, 1.51055, 1.36469, 1.34773, 1.41773, 1.38622, 1.36869, 1.43696,
              1.41124, 1.39557, 1.37889, 1.39315, 1.44551, 1.43552, 1.44993, 1.39343, 1.37357, 1.37221, 1.41257,
              1.39824, 1.35907, 1.38076, 1.37658, 1.34424, 1.32803, 1.37385, 1.36157, 1.45419, 1.38630, 1.34599,
              1.37501, 1.51610, 1.43208, 1.50840, 1.42141, 1.39749, 1.39802, 1.42326, 1.40436, 1.41719, 1.38632,
              1.45213, 1.40128, 1.36227, 1.50074, 1.37852, 1.42588, 1.39351, 1.37597, 1.38446, 1.38429, 1.42563,
              1.37193, 1.44029, 1.50645, 1.40649, 1.37338, 1.47141, 1.44049, 1.40393, 1.37843, 1.36302, 1.38990,
              1.40422, 1.34308, 1.38735, 1.39289, 1.59113, 1.47558, 1.40386, 1.35363, 1.43550, 1.38801, 1.42793,
              1.31047, 1.35873, 1.37483, 1.36795, 1.35819, 1.36229, 1.44067, 1.39491, 1.48112, 1.38576, 1.45005,
              1.37623, 1.36256, 1.33680, 1.33840, 1.37793, 1.33805, 1.39057, 1.36961, 1.51845, 1.41667, 1.37394,
              1.37652, 1.40081]
true_size = [12190.56342, 12190.56342, 12202.25473, 13167.05886, 14992.31780, 16787.20743, 18618.07113, 20213.38963,
             21741.19131, 23222.06938, 24617.60477, 25966.51086, 27207.83987, 28471.54555, 29517.75438, 30665.28171,
             31754.38017, 32808.77715, 33845.09110, 34683.16994, 35626.17029, 36603.98844, 37518.21619, 38353.50666,
             39313.33497, 40067.50981, 40875.86931, 41680.49509, 42621.42116, 43280.40434, 44024.16118, 44763.92537,
             45558.56797, 46475.01717, 46966.28942, 47862.97617, 48594.91135, 49015.14331, 49967.95445, 50576.75718,
             50878.72285, 51909.73090, 52431.70988, 52896.45095, 53747.34828, 54197.78346, 55049.01927, 55343.75753,
             56006.07884, 56917.91906, 57072.69657, 57225.81289, 58340.15032, 59066.73896, 59426.37526, 59913.17204,
             60556.35284, 61378.00350, 62331.10792, 62791.73686, 63417.19797, 64454.29502, 65042.87596, 66026.43938,
             66595.45235, 67698.28381, 68531.41345, 69303.48318, 70541.47722, 71501.68220, 72716.16153, 74025.07323,
             74815.13770, 76383.82025, 78223.42081, 78560.38507, 79997.49089, 82243.76804, 84247.61247, 85415.49685,
             87512.46496, 89893.88683, 91883.64331, 94973.27050, 97152.97302, 99622.44324, 103193.20568, 105696.12824,
             110323.47863, 113643.60547, 119681.81675, 124506.95725, 129462.84618, 138623.42957, 149210.57253,
             161813.34022, 177896.23546, 197308.83041, 219714.32130, 266297.69376, 302114.06833]
true_size = [i / (1024) for i in true_size]
true_time = [1.39811, 1.38842, 1.39478, 1.37934, 1.42729, 1.38214, 1.43595, 1.37097, 1.41813, 1.48043, 1.57370,
             1.43200, 1.55338, 1.40142, 1.40361, 1.39919, 1.44805, 1.42904, 1.41700, 1.54761, 1.46615, 1.34981,
             1.45806, 1.44151, 1.38211, 1.38172, 1.41314, 1.39175, 1.39882, 1.39573, 1.40823, 1.38956, 1.38240,
             1.40369, 1.43454, 1.51790, 1.49079, 1.40754, 1.38851, 1.48599, 1.40966, 1.38664, 1.40175, 1.43009,
             1.35588, 1.39600, 1.37664, 1.42539, 1.42777, 1.49735, 1.42117, 1.41271, 1.38857, 1.37729, 1.38358,
             1.41749, 1.38494, 1.39618, 1.38874, 1.50762, 1.42183, 1.40691, 1.51741, 1.38628, 1.37029, 1.52645,
             1.37632, 1.39456, 1.37662, 1.38496, 1.41284, 1.43025, 1.38431, 1.41627, 1.39598, 1.49045, 1.43035,
             1.38184, 1.39668, 1.45718, 1.40372, 1.41677, 1.39940, 1.40809, 1.60668, 1.48577, 1.40607, 1.38088,
             1.45585, 1.42360, 1.39755, 1.42075, 1.42325, 1.48816, 1.39956, 1.45839, 1.45713, 1.40263, 1.45996,
             1.44256, 1.43143]
y2 = [0.832785759, 0.837688107381295, 0.84259045576259, 0.8474928041438848, 0.8523951525251798, 0.8572975009064748,
      0.8621998492877698, 0.8671021976690647, 0.8720045460503597, 0.8769068944316547, 0.8818092428129497,
      0.8867115911942446, 0.8884146642805756, 0.8896814725539568, 0.8909482808273381, 0.8922150891007194,
      0.8934818973741008, 0.894748705647482, 0.8960155139208633, 0.8972823221942446, 0.898549130467626,
      0.8998159387410072, 0.9010827470143885, 0.9022758533992806, 0.9034456855035972, 0.9046155176079137,
      0.9057853497122302, 0.9069551818165468, 0.9081250139208633, 0.9092948460251798, 0.9104646781294964,
      0.9116345102338129, 0.9128043423381295, 0.913974174442446, 0.9149162858561151, 0.915730304381295,
      0.9165443229064748, 0.9173583414316546, 0.9181723599568345, 0.9189863784820144, 0.9198003970071943,
      0.9206144155323741, 0.9214284340575539, 0.9222424525827339, 0.9230564711079137, 0.9237280769244605,
      0.9242682248561152, 0.9248083727877698, 0.9253485207194245, 0.9258886686510792, 0.9264288165827339,
      0.9269689645143885, 0.9275091124460432, 0.9280492603776979, 0.9285894083093525, 0.9291295562410072,
      0.9297105439928058, 0.9303527914748202, 0.9309950389568346, 0.931637286438849, 0.9322795339208634,
      0.9329217814028777, 0.9335640288848921, 0.9342062763669066, 0.9348485238489209, 0.9354907713309353,
      0.9361330188129496, 0.9368762683129497, 0.9378792372877698, 0.93888220626259, 0.9398851752374101,
      0.9408881442122302, 0.9418911131870504, 0.9428940821618705, 0.9438970511366906, 0.9449000201115109,
      0.945902989086331, 0.9469059580611511, 0.9479297793093525, 0.9490630749928057, 0.9501963706762591,
      0.9513296663597123, 0.9524629620431655, 0.9535962577266187, 0.9547295534100719, 0.9558628490935251,
      0.9569961447769785, 0.9581294404604317, 0.9592627361438849, 0.9604160525755395, 0.9620498669640288,
      0.963683681352518, 0.9653174957410072, 0.9669513101294964, 0.9685851245179856, 0.9702189389064748,
      0.971852753294964, 0.9734865676834532, 0.9751203820719424, 0.9767541964604316]

y4=[0.4601183285320447,
0.8440267240403125,
0.887829119636311,
0.9013981843482871,
0.910439033001953,
0.9179628203717963,
0.9215920944276695,
0.9266614645726406,
0.9330702187140273,
0.9372964080065808,
0.94018124239801]
# y4=exponential_smoothing(0.9,y4)
# import sklearn
# scaler=sklearn.preprocessing.MinMaxScaler(feature_range=(0.4601, 0.97))
# y4=scaler.fit_transform(y4)

# plt.style.use('ggplot')
bars_name = ["Reuse", "LR", "SR"]  # 柱子名称
f1score = [0.73 * 0.95, 0.72, 0.73]
decode = [0, 0.02220, 0.02124]
sr = [0, 0, 0.05872]
infer = [0, 0.03940, 0.04918]
resuse = [0.01, 0, 0]
labels = ["f1score", "decode", "SR", "infer", "reuse"]  # 每个柱子的组成
colors = ["06283D", "moccasin", "royalblue", "orchid"]  # 每个组成的颜色
# colors = ["gold", "darkorange", "firebrick", "darkmagenta"]
colors = ["#2D4059", "#EA5455", "#FFD460", "#F07B3F", "#E0F9B5"]  # 每个组成的颜色
err_attr = {"elinewidth": 1, "ecolor": "black", "capsize": 6}
other = {
    "title": "",  # 标题
    "xlabel": "Quality",  # 横坐标名称
    "ylabel_left": "F1-score",  # 纵坐标名称
    "ylabel_right": "Size(KB)"
}
from colors import cdic
# std_err2 = [[0.3,0.3], 0.5*0.25, 0.45*0.25]
# std_err2=[[0.28*0.7,0.15,0.14],[0.25*0.7,0.2,0.21]]
# xticks = np.arange(len(bars_name))*0.7
a1 = [8, 5, 3, 2, 14, 2, 2, 0, 2, 8, 2, 0, 1, 1, 1, 1, 0, 1, 0, 1, 4, 8, 14, 1, 1, 5, 9, 6, 6, 6, 1, 0, 1, 0, 0, 2, 5,
      2,
      0, 3, 0, 1, 2, 0, 2, 5, 9, 4, 8, 6, 14, 6, 6, 9, 5, 6, 4, 12, 14, 3, 6, 10, 8, 4, 5, 7, 4, 5, 7, 7, 2, 8, 8, 4, 1,
      14, 2, 1, 10, 2, 3, 0, 3, 1, 4, 1, 2, 2, 2, 4, 1, 4, 8, 7, 6, 11, 7, 10]
a2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 3, 0, 2, 0, 4, 3, 3,
      4, 2, 4, 3, 2, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 4, 0, 0, 2, 4, 0,
      4, 3, 0, 0, 0, 3, 0, 3, 0, 3, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0]

x = [i * 10 for i in range(1,10)]
x = [i * 3 for i in range(33)]
# ax1.fill_betweenx([-0.1, 400], 40, 80, color='#DCD0FF', alpha=0.7)
y3=y2[10:100:10]
print(y2[10:100:10])
x1= [i * 10 for i in range(0,11)]
m=[0.6]
m.extend(y2[10::10])
ax1.plot(x1, y4, color=cdic["red"], marker='o', markeredgewidth=0.01, label='F1-score', zorder=20)

# 双轴 共享x轴
ax2 = ax1.twinx()
x = [i * 3 for i in range(0,33)]
ax2.plot(x, true_size[3::3], marker='s', color=cdic["blue"], markeredgewidth=0.1, label='Size', zorder=10)
ax1.set_ylabel(other["ylabel_left"], fontsize=fls)
ax2.set_ylabel(other["ylabel_right"], fontsize=fls)

# ax.set_yticks(np.arange(0, 1, 0.2))
ax1.set_ylim(0.8, 1.05)
ax2.set_ylim(0, 400)
ax1.tick_params(labelsize=fs)
ax2.tick_params(labelsize=fs)
# ax1.axvline(x=40, color='gray', linestyle='--')
# ax1.axvline(x=80, color='gray', linestyle='--')
# 隐藏x轴
ax2.spines["bottom"].set_visible(False)
# 水平画虚线
ax1.axhline(0.91, color='#779DE9', linestyle='--')
ax1.tick_params(axis="x",length=0)
# ax.set_yticks([0.80,0.85,0.90,0.95,1.00])
ax1.set_yticks([0.80, 0.91, 1.00])
plt.text(33, 100, '540px2 SR acc.', fontsize=20, color='black')

# 双轴图例
lines = []
labels = []
axLine, axLabel = ax1.get_legend_handles_labels()
lines.extend(axLine)
labels.extend(axLabel)
axLine, axLabel = ax2.get_legend_handles_labels()
lines.extend(axLine)
ax1.spines["bottom"].set_visible(False)
labels.extend(axLabel)
ax1.grid(axis='y', zorder=1)
ax1.legend(lines, labels, ncol=2, prop=font1,loc='upper left',handlelength=1.0)






x = [i * 3 for i in range(33)]
from colors import cdic

false_size = [i *8/4 for i in false_size]
true_size=[i *8/4 for i in true_size]
# 下面的子图
ax.plot(x,true_size[3::3],color=cdic["green"], linestyle='-',label='Agent 0',marker='o',markeredgewidth=0.01,linewidth=3.0,zorder=2)
ax.set_xlim(0,100)
ax.set_ylim(0,300)
ax.set_xlabel(other["xlabel"],font2)
ax.set_yticks([0,100,200,300])#设置大小及加粗
ax.tick_params(axis='x', labelsize=fs)
ax.tick_params(axis='y', labelsize=fs)
#ax.set_xticks( size=15)
ax.axhline(210, color='#779DE9',linestyle='--')
# ax.axvline(x=40, color='gray', linestyle='--')
# ax.axvline(x=80, color='gray', linestyle='--')

#整体的边界线和网格线等
ax.spines["top"].set_visible(False)
ax.grid(axis='y', zorder=1)
ax.text(3, 245, 'SR Time', fontsize=20, color='black')
#plt.legend(loc="best",prop=font1)
#plt.legend( ncol=2,handlelength=1.3,handleheight=1,labelspacing=0.1, loc='upper right',prop=font1)

plt.tight_layout()
plt.savefig("折线_上下子图.png")
plt.show()